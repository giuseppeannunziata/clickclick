!ClickClick provides out-of-the-box server side Ajax support through [http://code.google.com/p/clickclick/source/browse/trunk/clickclick/core/src/net/sf/clickclick/ClickClickServlet.java ClickClickServlet].

=== Activate Ajax Support ===

To use Ajax you must use the !ClickClickServlet. See GettingStarted on how to setup the !ClickClickServlet.

=== Introduction ===

The !ClickClickServlet allows you to set an !AjaxListener instance on Click Controls that is dispatched when an Ajax request targets the Control.

For example:

{{{
public class AjaxDemo extends Page {

    public AjaxDemo() {
        // Define a link with a name, description and id
        AjaxActionLink link = new AjaxActionLink("link", "Click here", "link-id");

        // Set an AjaxListener instance on the link control
        link.setActionListener(new AjaxAdapter(){

            // The onAjaxAction method is invoked when the link is clicked
            public Partial onAjaxAction(Control source) {

                // A Partial response is returned to the browser
                Partial partial = new Partial();
                partial.append("<h2>Hello world!</h2>");
                return partial;
            }
        });

        addControl(link);
    }
}
}}}

In the example above an Ajax aware !ActionLink is created and an !AjaxAdapter listener is registered on the link that is dispatched when the link is clicked.

Inside the listener a !Partial instance is created (Partial represents a partial page response) that returns the markup "{{{<h2>Hello world!</h2>}}}" to the browser.

=== How Ajax support works ===

When !ClickClickServlet receives a request it first checks if the request is an Ajax request or not. An Ajax request contains the special header "X_REQUESTED_WITH" which most Ajax libraries such as JQuery, Prototype etc specifies on the request.

If the request is an Ajax request, ClickClickServlet tries to find the target Control of the Ajax request. On the server side there are three requirements that must be fulfilled in order to target a Control. (*Note:* some of these steps are performed by Ajax aware Controls or Ajax helper classes, however for completeness all steps are listed):

 # The Control must be registered with AjaxControlRegistry (Registration is normally performed in the _onInit_ event of Ajax enabled Controls. Unless you are writing your own Ajax aware Controls, you don't have to worry about this step)
 # The Control must have an ID attribute defined (ActionLink is an exception and doesn't need an ID attribute. Its name is enough to identify it)
 # The Control must have an AjaxListener set (AjaxListener is a subclass of ActionListener).

The above three requirements are the necessary steps to take on the server side. On the client side (browser) where the Ajax request is initiated, the following requirements are necessary:

 # The ID of the target Control must be specified as a request parameter.

The value of the ID attribute can be an arbitrary value and is in fact ignored by Click. (Sometimes ActionLinks (&lt;a href="..."&gt;) do not specify an ID parameter. For example when a Table row is decorated with an ActionLink, specifying the ID attribute will result in each Table row rendering an ActionLink with the same ID, which isn't allowed by the HTML spec. To work around this problem !ClickClickServlet will also check for the presence of the "actionLink" parameter).

Below is an example where we create a new AjaxActionLink and set the ID value to "linkId".

{{{
public class AjaxDemo extends Page {

    public AjaxDemo() {
        // Define a link with a name, description and id
        AjaxActionLink link = new AjaxActionLink("link", "Click here", "link-id");

        // Set an AjaxListener instance on the link control
        link.setActionListener(new AjaxAdapter(){

            // The onAjaxAction method is invoked when the link is clicked
            public Partial onAjaxAction(Control source) {

                // A Partial response is returned to the browser
                Partial partial = new Partial();
                partial.append("<h2>Hello world!</h2>");
                return partial;
            }
        });

        addControl(link);
    }
}}}

To target the link the Ajax request must include the parameter "linkId".

Here is a jQuery example:

{{{
 $.ajax({
   type: "POST",
   url: "/ajax-demo.htm",
   data: "linkId=1", // Note: linkId is set as parameter
   success: function(msg){
     alert( "Data Saved: " + msg );
   }
 });
}}}

Here is a Prototype example:

{{{
new Ajax.Request("/ajax-demo.htm", {
     method: 'POST',
     parameters: {linkId: '1'}, // Note: linkId is set as parameter
     onSuccess: function(transport){
       alert("Data Saved: " + transport.responseText);
     }
  });
}}}

Both of the examples above set the value of _linkId_ to 1, however this value is ignored by Click. As long as the request parameter _linkId_ is present, Click will know which Control is the target.

=== The Ajax request cycle ===

Ajax requests are handled a bit differently from normal Click requests, as illustrated below:

[http://clickclick.googlecode.com/svn/trunk/site/images/diagrams/ajax-request-sequence-diagram.png]

Only three events are processing during an Ajax request. They are:

 # onSecurityCheck()
 # onInit()
 # onProcess()

Stepping through the Ajax request sequence, a Page is created and its `onSecurityCheck()` event handler is executed. This method can be used to ensure the user is authenticated to access the Page. By returning false, no further processing occurs.

The next event handler is `onInit()` where Page Controls are created such as Forms, Fields and Tables.

Next, the target Ajax control is processed and if the control action listener is set, it is invoked. ClickClick provides an AjaxListener, subclass of ActionListener, that returns a Partial object.

Finally ClickClickServlet renders the Partial response to the browser.

A Partial can be described as a fragment (of a Page) sent back to the browser. For example a Partial can be used to return new Controls, or add rows to a Table.

Another view of the Ajax execution flow can be seen in the diagram below:

[http://clickclick.googlecode.com/svn/trunk/site/images/diagrams/ajax-request-activity-diagram.png]

=== Example ===

The !AjaxDemo.java Page:

{{{
public class AjaxDemo extends Page {

    public AjaxDemo() {
        AjaxActionLink link = new AjaxActionLink("link", "Click here", "link-id");

        link.setActionListener(new AjaxAdapter(){

            // The onAjaxAction method is invoked when the link is followed
            public Partial onAjaxAction(Control source) {
                Partial partial = new Partial();
                partial.append("<h2>Hello world!</h2>");
                return partial;
            }
        });

        addControl(link);
    }
}
}}}

The ajax-demo.htm template:

{{{
$link
}}}