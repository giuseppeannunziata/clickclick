#summary Outlines jQuery support in ClickClick

Please see the section [Ajax], for details on Ajax support provided by !ClickClick

===  JQuery Subproject ===

The jQuery sub-project provides tight integration between Click and the [http://jquery.com/ jQuery] !JavaScript library.

JQuery support centers around the jQuery [http://malsup.com/jquery/taconite/ Taconite plugin]. Taconite is a plugin that allows you to make multiple DOM updates with a single Ajax request. With Taconite you specify a list of commands to be executed as the result of an Ajax request.

Taconite commands are built as a single XML document, which is returned to the browser where the commands are executed one by one.

The jQuery-Click subproject provides the [http://clickclick.googlecode.com/svn/trunk/site/javadoc/jquery-api/net/sf/clickclick/jquery/util/Taconite.html Taconite] Java class to wrap the Taconite plugin so you don't have to write any XML code yourself.

To see this in action here is an example:

{{{
public class MyPage extends Page {

    // Create a new jQuery ActionLink control called "link"
    private JQActionLink link = new JQActionLink("link");

    public void onInit() {
        addControl(link);

        link.setActionListener(new OnClickListner());
    }

    class OnClickListener extends AjaxAdapter {

        // When the link is clicked, this method is invoked that returns a Taconite
        // instance
        public Partial onAjaxAction(Control source) {

            // Create a new Taconite partial instance
            Taconite partial = new Taconite();

            // Insert a Table after the link
            partial.after(link, new Table("table"));

            return partial;
        }
    }
}
}}}

The Taconite instance above will render the following XML document:
{{{
<taconite>
    <after select="#link">
        <table name="table" id="table">
        </table>
    </after> 
</taconite> 
}}}

Here is another example showing that multiple commands can be executed:

{{{
public class MyPage extends Page {

    // Create a new jQuery ActionLink control called "link"
    private JQActionLink link = new JQActionLink("link");

    public void onInit() {
        addControl(link);

        link.setActionListener(new OnClickListner());
    }

    class OnClickListener extends AjaxAdapter {

        // When the link is clicked, this method is invoked that returns a Taconite
        // instance
        public Partial onAjaxAction(Control source) {

            // Create a new Taconite partial instance
            Taconite partial = new Taconite();

            Table table = new Table("table");

            // Insert a Table after the link
            partial.after(link, table);

            Span span = new Span();
            span.setText("Hello World!");

            // Insert a Span element before the table
            partial.before(table, span);

            return partial;
        }
    }
}
}}}

The Taconite instance above will render the following XML document:
{{{
<taconite>
    <after select="#link">
        <table name="table" id="table">
        </table>
    </after>

    <before select="#table">
        <span>Hello World!</span>
    </before>
</taconite>
}}}

If you know jQuery you might have realized that Taconite XML commands map directly to [http://docs.jquery.com/Manipulation jQuery methods]. Please see the [http://malsup.com/jquery/taconite/#commands Taconite Command] section for details.

=== Features ===

Here are the list of this project features:

 * Ajax actions can return any Click control to the browser. For example, one can submit a Form using Ajax and allow the Partial to only return the updated Form, which may or may not contain validation errors
 * When Ajax actions return a Click Control, the Control's CSS and !JavaScript resources must be returned as well, otherwise the Control won't function correctly
 * If CSS and JavaScript resources are already available to the browser, they must be ignored. For example if an Ajax action returns a Form, the Form's resources (control.js, control.css) will also be returned and added to the browser's DOM. However if a second Ajax action again returns a Form, it will detect that the resources (control.js and control.css) are already available to the browser and won't add them again. For those interested if the resources are added again, the browser will download the control.js JavaScript again, which is unnecessary.

=== Infrastructure ===

One of the main pieces is the !JavaScript file [http://code.google.com/p/clickclick/source/browse/trunk/clickclick/jquery/src/META-INF/web/clickclick/jquery/jquery.click.js jquery.click.js]. This script combines the plugins [http://malsup.com/jquery/taconite/ jQuery Taconite], [http://docs.jquery.com/Plugins/livequery jQuery LiveQuery] and custome Click specific code to handle some of the advanced features necessary to seamlessly support Ajax.

Please note that [http://docs.jquery.com/Plugins/livequery jQuery LiveQuery plugin] will be removed in a future version once jQuery [http://docs.jquery.com/Events/live live()] supports more events.

TODO